	1.新建一个项目cloud-provider-hystrix-payment8001
2.引入pom.
  <dependencies>
        <!--新增hystrix-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>


        <dependency>
            <groupId>com.atguigu.springcloud</groupId>
            <artifactId>cloud-api-commons</artifactId>
            <version>${project.version}</version>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
3.修改yam.
	server:
	  port: 8001


	eureka:
	  client:
		register-with-eureka: true    #表识不向注册中心注册自己
		fetch-registry: true   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务
		service-url:
		  # defaultZone: http://eureka7002.com:7002/eureka/    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址
		  defaultZone: http://eureka7001.com:7001/eureka/
	#  server:
	#    enable-self-preservation: false
	spring:
	  application:
		name: cloud-provider-hystrix-payment
	  #    eviction-interval-timer-in-ms: 2000
4.启动类.
  注意添加启动Eureka注解.
  @EnableEurekaClient
5.业务类.
  这里仅仅提供两个访问方法.一个没有时间延迟,一个有时间延迟.
  service层
   @Service
	public class PaymentService {

		public String getPaymentId_OK(Integer id){
			return "Thread:"+Thread.currentThread().getName()+", getPaymentId_OK,id: "+ id;
		}


		public String getPaymentId_timeout(Integer id){
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return "Thread:"+Thread.currentThread().getName()+", getPaymentId_timeout,id: "+ id;
		}
	}
	controller层
	 @RestController
	@Slf4j
	public class HystrixPaymentController {

		@Resource
		private PaymentService paymentService;

		@GetMapping("/payment/get/ok/{id}")
		public String getPaymentId_OK(@PathVariable Integer id){
			long startTime = System.currentTimeMillis();
			String paymentId_ok = paymentService.getPaymentId_OK(id);
			long endTime = System.currentTimeMillis();
			return paymentId_ok+"花费时间:"+(endTime-startTime)/1000;
		}


		@GetMapping("/payment/get/timeout/{id}")
		public String getPaymentId_timeout(@PathVariable Integer id){
			log.info("接收到请求...");
			return paymentService.getPaymentId_timeout(id);
		}
	}
6.适用jmeter进行压测.
  (1)执行jmeter.bat开启.
  (2)在左边直接右键->添加->线程(用户)->线程组->指定线程数,间隔时间,循环次数(此次是200,1,100,也就是总共20000个线程)
  (3)在该线程组右键->添加->取样器->HTTP请求->指定协议,ip,端口号,请求路径(这里是对耗时请求http://localhost:8001/payment/get/timeout/01访问)->保存
  (4)选中这个HTTP请求,点击上方的绿色小三角,即开启测试. 如果向停止,点击旁边的STOP即可.
  
  在进行压力测试后,重新从网页执行http://localhost:8001/payment/get/ok/01,可以发现,原本不需要花费时间的请求也变得需要好几秒才能返回.这是因为tomcat的线程资源被占用去处理另一个耗时请求.
  
  注意不要一下子测试太多线程,这次给了十万个线程,停止都停止不了
  
  
  
  
