1.网关.
  广义上得网关.
  从一个房间走到另一个房间,必然会经过一扇门,而从一个网络连接到另一个网络,也必然经过一个'关口',这个关口就是网关.
  所有网络都有一个边界，限制与直接连接到它的设备的通信。因此，如果网络想要与该边界之外的设备，节点或网络通信，则它们需要网关的功能
  
  为什么网络要被隔离呢?限制成一个一个网络呢?
    这个就像现实世界为什么要有房子呢?其实主要就是为了安全.
	
2.Spring Cloud中得网关GateWay.
  GateWay是在Spring生态体系上建立得API网关服务,基于	Spring5,SpringBoot2等技术.
  旨在提供一种简单而有效得方式对API进行路由,以及提供一些强大得过滤器功能,如熔断,限流,重试等.
  
  底层使用了Netty通讯框架.
  
  作用:
     安全
	 过滤
     反向代理
	 鉴权
	 流量控制
	 熔断
	 日志监控
	 

  微服务中得大体流程:
     外部请求----->nignx负载均衡----->网关(安全,流量控制)----->各个微服务.
	 
	 
3.目前得网关服务主要有zuul和GateWay,为什么选择GateWay.
  (1)zuul 1.x采用得阻塞模型,性能不够高,而2.x版本又迟迟不发布.
      GateWay底层使用得是Netty,采用得是异步非阻塞模型,性能更高.
  (2)GateWay与spring进行了完美融合,并具有一些特性.
      动态路由:能够匹配任何请求属性,可以对路由指定Predicate(断言)和Filter(过滤器)
	  集成了断路器和服务发现功能
	  
4.为什么要有微服务网关?
  (1)你的微服务可能由很多个,而每个服务都需要限流,权限校验等逻辑,如果每个服务各自为战,重复造轮子,就很蛋疼,所以就需要提出来到一个统一的地方做.
  (2)还有一些基本的安全防护,黑白名单校验也都需要网关来做.
   
	  
	  
补充知识:
1.servlet是什么?
  servlet是一个Java API ,一个接口,定义了Java类能被客户端浏览器所能访问得规则.
  比如说采用什么样的IO模型去拿,或者说去接收数据,更简单的说就是我规定了第一个接收到请求信息的Java类一定是servlet接口对应的实现类,
  比如在SpringMVC中,就是实现了处理所有请求得一个servlet->DispatcherServlet进行处理.
  
  Servlet没有main方法,不能独立运行,它必须被部署在servlet容器(如tomcat)中,由容器来实例化和调用servlet的方法,如DoGet()和DoPost()方法.
  
  
  一个请求从访问到返回得过程大概如下:
    (1)客户端发送请求到服务器端;
	(2)服务器将请求信息发送至servlet;
	(3)Servlet生成响应内容,并将其传给服务器;
	(4)服务器将响应返回给客户端.
	

  在之前,传统的servlet是I/O阻塞模型,在servlet3.1之后,有了异步非阻塞的支持.	
  
	  

	 
  
  