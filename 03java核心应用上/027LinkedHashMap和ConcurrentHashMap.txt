
    HashMap可以保证成对元素唯一,并且查询速度很快,但不能保证顺序,而LinkedHashMap即可以保证元素唯一,又能保证顺序.它是哈希表和链表的数据存储结构.
    
    LinkedHashMap是HashMap的子类.
   
    使用方法和HashMap一样.

1.为什么要有linkedHashMap.
   因为hashMap不能保证顺序,遍历顺序和插入顺序不一样一致.而linkedHashMap就可以保证.它继承自hashMap.

2.linkedHashMap底层结构.
     和HashMap底层结构一样,区别是他在所有的节点(链表上的节点)之间维护了一条双向链表.通过对双向链表的标识,操作,
   可以达到记录插入顺序的功能.

   同时,还提供了一些额外的操作.比如说将最近使用的元素移到队列前.


3.concurrentHashMap.
    ConcurrentHashMap采用了非常精妙的"分段锁"策略，ConcurrentHashMap的主干是个Segment数组.
    一个Segment就是一个子哈希表，Segment里维护了一个HashEntry数组，并发环境下，对于不同Segment的数据进行操作是不用考虑锁竞争的.
   Segment 类继承于 ReentrantLock 类，从而使得 Segment 对象能充当锁的角色。每个 Segment 对象用来守护其（成员对象 table 中）包含的若干个桶。
   synchronized和ReentrantLock区别.
     1.synchronized是可重入的，ReentrantLock也是可重入的
     2.synchronized是关键字，ReetrantLock不是，是个Java类
     3.实现方式不同，synchronized是通过JVM的字节码实现，每个类对象都绑定一个Monitor，进入一个synchronized同步逻辑时需要获取该Monitor并在计数时加1，离开时释放并减1；
      ReentrantLock是通过CAS操作实现的
    4.synchronized的加锁和释放锁是自动的，ReetrantLock需要手动加锁和释放锁

    可重入锁:是一个线程在获取了锁之后，再次去获取了同一个锁，这时候仅仅是把状态值进行累加.

    在JDK1.7版本中，ConcurrentHashMap维护了一个Segment数组，Segment这个类继承了重入锁ReentrantLock，并且该类里面维护了一个 HashEntry<K,V>[] table数组，
  在写操作put，remove，扩容的时候，会对Segment加锁，所以仅仅影响这个Segment，不同的Segment还是可以并发的，所以解决了线程的安全问题，同时又采用了分段锁也提升了并发的效率。
在JDK1.8版本中，ConcurrentHashMap摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，
整个看起来就像是优化过且线程安全的HashMap。