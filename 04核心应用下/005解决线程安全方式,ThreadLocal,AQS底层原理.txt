
    当我们使用多线程用同一资源时,并写对同一资源有写操作时,就容易出现线程安全问题.解决多线程并发访问同一资源的安全问题,需要使用java提供的同步机制(synchronized)
    使用这种方式就能保证数据的一致性.
    特点:线程不安全效率高.
         线程安全效率低.

同步方式:
    一.同步代码块(灵活)
      1.格式:
         synchronzied(锁对象){
           //需要同步的代码
         }

      2.说明:可以用在方法体里,实现资源的互斥访问.
        锁对象:又称为同步锁,只是一个概念,可以想象成一把锁,只不过这个锁也是对象
      3.要求:(1).可以为任何类型
             (2).多个线程使用同一个锁.(否则有的线程就不能够访问)
  
      例:
      int TicketNumnle=100;
      Object luck=new Object();             //new锁对象
        @Override
      public void run() {
        while(true){
            synchronized (luck){           //把该锁的代码锁住,只允许一个线程访问.互斥访问
                if(TicketNumnle>0){
                    //出票
                    try {
                        Thread.sleep(1001);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println(Thread.currentThread().getName()+"正在出票"+TicketNumnle--);

                }
            }

        }
      }
      
    二.同步方法(没有代码块灵活)
      1.格式:
        访问修饰符 synchronized 返回值类型 方法名(参数){
          //需要同步的代码体,方法块
        }
      2.说明:这个方法里面全部的代码都可以实现互斥访问.
      3.问:同步方法的锁对象是什么?
         如果是非静态方法:锁对象是this.即调用该run()方法的对象  
         如果是静态方法:锁对象就是方法所在类的字节码对象(类名.class)
      
      例:
      int TicketNumnle=100;
        @Override
      public void run() {
        while(true){
            synchronizedprint();                           //调用有锁的方法.这个方法里面的代码都实现互斥访问
        }
      }           
      public synchronized void synchronizedprint(){        //该方法中的代码均实现互斥访问
        if(TicketNumnle>0){
            //出票
            try {
                Thread.sleep(1001);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName()+"正在出票"+TicketNumnle--);
        }
      }
     理解:当对象调用run()方法时.执行到synchronizedprint()方法,
          该方法有synchronized声明,此时该对象就会自动充当为锁对象.
    三.锁
      JDK1.5以后提供的新同步机制.
      1.优势:1.更符合面向对象的编程思想
             2.更加灵活.
      2.格式:
        Lock lock=new ReentrantLock();       //Lock是一个接口,ReentrantLock是它的实现类.
        lock.lock();
          //实现互斥访问的代码
        lock.unlock();

     例:
      int TicketNumnle=100;
      Lock lock=new ReentrantLock();
        @Override
      public void run() {
        while(true){
            lock.lock();
            if(TicketNumnle>0){
                //出票
                try {
                    Thread.sleep(1001);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread().getName()+"正在出票"+TicketNumnle--);
            }
            lock.unlock();
        }
      } 

四.ThreadLocal.
     1.作用:具有线程隔离性,用于解决多线程中相同变量的访问冲突问题.使每个线程读到的变量都是相独立的.
               线程内部变量仅相对于本线程而言可见.
     2.原理:
               (1)ThreadLocal的静态内部类ThreadLocalMap,为每一个Thread都维护了一个数组entry,并且确定了当前value的存储下标.
               (2).在存储元素的时候,首先获取到当前线程对象,每个Thread都会有唯一一个ThreadLocalMap,然后利用threadlocalMap中的threadLocalHashcode(一个int类型变量,每回生成一个不同的值)
                     计算出当前要存储的entry数组中的下标位置,key就是threadLocal对象,然后将value存进去.
              (3).取元素的时候也是先获取当前线程对象,然后获取threadLocalMap,和上面一样的原理,从entry数组中取出来.
       为什么使用开放地址法?
              ThreadLocal 往往存放的数据量不会特别大（而且key 是弱引用又会被垃圾回收，及时让数据量更小），这个时候开放地址法简单的结构会显得更省空间，同时数组的查询效率也是非常高，加上第一点的保障，冲突概率也低
       开方地址法的缺点是容易产生堆积,不适用于大规模的存储.

     链地址法:不存在堆积问题,冲突处理简单,适合大数据存储.

五.AQS底层原理.
    1.介绍:AQS:abstractQueuedSynchronizer:抽象同步队列.他是reentrantlock实现锁竞争的底层.
    2.大概实现原理. 
      (1)如果被请求的资源空闲,则设置当前线程为工作线程,并将公共资源设置为锁定状态,通过CAS操作 state,0就是空闲,大于0就是锁定状态.
      (2)如果共享资源被占用,那么就需要一套线程阻塞,等待,被唤醒的分配机制,AQS是用CLH队列来实现的这个机制的,即将暂时获取不到锁的线程加到队列中.
      (3).CLH队列是一个虚拟的双向队列(虚拟的双向队列即不存在队列实例,仅存在节点之间的关联关系),AQS把每个线程封装成队列的一个节点来实现锁的分配.
           也就是说如果资源被占用,其实当前线程还要再次判断state的状态,看是否可以获取到锁以及判断占有锁的线程是否是当前线程,如果仍旧没有获取到锁,则通过CAS操作将当前线程设置为队尾节点.
      (4).队列中的头节点即占用当前线程,如果执行完毕,唤醒下一个节点,下一个节点再次通过CAS操作获取公共资源.
    lock默认实现是非公平锁,就是它来的时候刚好工作线程释放了锁,有机会可以插队的.
     不管有没有阻塞队列，只要当前线程来的时候发现state资源没被占用那么当前线程就抢先一步试一下CAS，CAS失败了它才去排队； 
     其中state是用volitile来修饰的.
   
