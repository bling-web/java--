一.线程池介绍:
  就是一个容纳多个线程的容器,其中的线程可以反复使用,省去了频繁创建线程对象的操作,无需反复创建线程而消耗过多资源.

线程池好处:
  1.降低资源消耗.
    减少了创建和销毁线程的次数,每个工作线程都可以被重复利用.
  2.提高相应速度.
    当任务到达时,任务可以不需要等到线程创建就能立即执行.
  3.提高线程的可管理性.
    只能容纳固定数量的线程,多了也进不来.

线程池使用:
  Java里面线程池的顶级接口是java.util.concurrent.Executor,但是严格意义上讲Executor并不是一个线程池.而只是一个执行线程的工具.真正的线程池接口是java.util.concurrent.ExcutorService.

步骤:
  1.创建线程池对象.
    ExecutorService executorSercive=Executors.newFixedThreadPool(nThreads:2)
    注意:这个2是线程池的容量,即只能同时运行2个线程,如果提交了三个线程,第三个线程必须等待其中一个线程运行完后再运行
    不能直接new,通过方法来创建.
  2.创建线程任务
    一个类实现Runnable接口.是线程任务对象(不是线程对象)
    public class MyThread implements Runnable{}
  3.把线程任务提交到线程池中.
    executorSercive.submit(MyThread);

    某个线程任务对象提交了线程池,就会执行该对象任务.该语句相当于t1.start();t2.start().

  4.关闭线程池.
    一般不关,一旦关闭,里面的线程都会销毁.


二.手写线程池.
    主要思想就是用有限的线程数量去执行很多的线程任务.从而达到管理线程的目的.
1. MyThreadPool类中.
public class MyThreadPool {
    private  BlockingQueue<Runnable> queue;  //线程任务仓库,也就是存储的任务对象
    private List<Thread> list;   //线程池容器,也就是存储线程对象

    public class Worker extends Thread{
        @Override
        public void run() {
            Runnable task=null;
            for(;;){
                try {
                    task= queue.take();      //如果队列为空,取任务时会阻塞,等待直到有新的任务.
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if(task!=null){
                    task.run();
                    System.out.println("当前线程: "+Thread.currentThread().getName()+" 执行线程任务");
                }
            }
        }
    }
    public MyThreadPool(int queueSize,int threadSize) {
        queue= new LinkedBlockingQueue<Runnable>(queueSize);
        list= Collections.synchronizedList(new ArrayList<>());
        for (int i = 0; i < threadSize; i++) {
            Worker worker = new Worker();
            list.add(worker);
            worker.start();
        }
    }
    public void submit(Runnable task) throws InterruptedException {
        this.queue.put(task);   //如果任务队列满了,放入任务会阻塞,等待有位置后放入新的线程.
    }
}

2.进行测试.
  public static void main(String[] args) throws InterruptedException {
        MyThreadPool myThreadPool = new MyThreadPool(3, 3);

        for (int i = 0; i < 15; i++) {
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    System.out.println("执行任务: ");
                }
            };
            myThreadPool.submit(runnable);
        }
    }



执行结果就是3个线程不断取执行这15个任务,直到执行完毕,然后阻塞等待.所以缺点就是不能回收线程.

三.线程常用方法.
  1.停止一个线程什么方法?
<<<<<<< HEAD
      interrupt:中断线程.不能用stop()方法,非常不安全
=======
      interceptor:中断线程.不能用stop()方法,非常不安全
>>>>>>> c60e222a4385ab38dafeb863ba57081c97b139d6
      在介绍线程池关闭之前，先介绍下Thread的interrupt。
      在程序中，我们是不能随便中断一个线程的，因为这是极其不安全的操作，我们无法知道这个线程正运行在什么状态，它可能持有某把锁，强行中断可能导致锁不能释放的问题；或者线程可能在操作数据库，强行中断导致数据不一致混乱的问题。正因此，JAVA里将Thread的stop方法设置为过时，以禁止大家使用。
      一个线程什么时候可以退出呢？当然只有线程自己才能知道。
      所以我们这里要说的Thread的interrrupt方法，本质不是用来中断一个线程。是将线程设置一个中断状态。
      当我们调用线程的interrupt方法，它有两个作用：
           1、如果线程进入了等待或者睡眠状态,使用该方法可以终止线程,并抛出InterruptedException异常，线程就可以通过捕获InterruptedException来做一定的处理，然后让线程退出。
                处于block状态的线程不会抛出异常.关闭不了.
           2、如果此线程正处于运行之中，则线程不受任何影响，继续运行，仅仅是线程的中断标记被设置为true。所以线程要在适当的位置通过调用isInterrupted方法来查看自己是否被中断，并做退出操作。

      我们知道如果一个线程正在运行,那么使用interceptor()方法不能停止,而使用stop()方法又非常的不安全,那么我们该怎么安全的停掉一个正在运行的线程呢?
        可以使用无线循环判断的方式.
        public class TestInterceptor implements Runnable{

	private static boolean isContinue=true;
	public void run() {
		
		while(isContinue) {
			//执行代码逻辑
			long a=38462*3464*34234-82343874+37482634;      //纯属消耗时间而已
			System.out.println("代码继续执行...");
		}
	}
	public static void setContinue(boolean flag) {
		isContinue=flag;
	}
        }

   2.线程池中怎么进行切换线程
   3.怎么判断线程的存活情况
     isAlive()或者getState获取线程状态即可
   4.当关掉线程池时,正在运行的线程怎么办?
      关闭线程池有两个方法:
       showdown:按顺序关闭以提交任务的线程,同时不允许提交新的任务.会把所有已经提交的任务执行完再关闭.推荐使用该方法
        showdownNow:尝试立即关闭所有的线程,一旦执行完当前任务就会被关闭,而新提交的任务不会被执行.
                                 使用interrupt方法.但是不保证能够关闭所有线程,比如说不能对intertupt做出正确响应的线程.对于那些sleep的线程会抛出中断异常.整个程序终止.
                                  处于block状态的线程不会抛出异常.关闭不了.同时移除正在等待的任务.
   

四.线程池的实现.
     线程池的实现主要有三种方法.
    1.public static ExecutorService newFixThreadPool(int nThread):
      该方法会返回一个固定大小的线程池,如果有新的任务来,又没有空闲的线程的话,就会把任务交到等待队列中,也就是有界队列.
    2.public static ExecutorService newCatchThreadPool();
       该方法得到的线程数量不是固定的,会根据实际进行调整,如有新的任务,而没有空闲的线程,就会新new一个线程去执行任务.也就是无界队列.
    3.public static ExecutorService newSingleThreadPool();
       返回一个单个线程的线程池.
   
    原理:其实三种实现方法底层ThreadPoolExecutor类实现的,只不过传入参数不一样.构造方法的参数.
           参数分别是int corePoolSize, 核心线程数,可以理解为正式员工,可以一直存在.
                           int maxmumPoolSize,  线程池中的最大线程数.最大线程数-核心线程数=非核心线程数.
                                                               非核心线程数就可以理解为外包人员,只能存在一定的时间,
                           long keepAliveTime, 线程数超过指定数值(corePoolSize)后,空闲线程的存活时间,也就是非核心线程存活的时间.
                           TimeUnit unit,线程池维护线程所允许的时间单位
                           BlockingQueue<Runnable> workQueue 被提交但未被执行的任务  所使用的队列
        分别解释各个类的实现:
        1.FixedThreadPool
           corePoolSize和maximumPoolSize都是传入的最大线程数,意思只有核心线程,第三个参数存活时间为0,也就是非核心线程存活时间为0.
           第五个参数是无界队列,意思是当队列数达到maximumPoolSize后,又有新任务时,就把任务加到无线队列中等待.直至内存被用完.
        2.CatchThreadPool
           corePoolSize是0,Integer.MAX_VALUE表示无穷大,意思没有核心线程,只有非核心线程,存活时间为60秒,使用队列是直接提交队列(队列大小为1),就是提交到队列中的任务会被直接执行,如果有空闲线程,
           使用空闲线程,如果没有,而,Integer.MAX_VALUE又是无穷大,就会直接新建一个线程去执行任务.
        3.newThreadPool
           corePoolSize和maximumPoolSize都是1来保证只有一个线程.


五,线程池的执行原理,顺序.
   不论是那种线程池实现,其底层都是一样的.
   1.判断任务数目是否大于核心线程数,有当前核心线程处理不了的任务走第二步.
   2.将多出来的任务放在相应的等待队列中.如果队列中还放不下.走第三步.
   3.将队列中放不了的使用非核心线程去处理.还处理不完的走第四步.
   4.使用拒绝策略.

       所以,基于以上,如果线程参数为(10,20,10,second,arrayBlockigQueue(10的容量))那么它最多同时处理三十个任务,
    先核心线程处理10个,然后队列中存十个,非核心线程再处理10个再多就需要使用拒绝策略了.

六.连接池其实本质和线程池是一样的.
    1.连接池里面就是connection,socket对象.而socket是非线程安全,直接加锁会严重拖慢效率,所以使用池化技术.
    2.里面有固定数量的connection.socket对象,还有一个阻塞队列,存放请求,每一个请求使用一个connection和socket对象.用完了放回去.
    
   
    