我们经常使用 MySQL 的执行计划来查看,分析SQL 语句的执行效率.

<<<<<<< HEAD
使用方式:
      在sql语句前面加上explain 即可  

=======
>>>>>>> c60e222a4385ab38dafeb863ba57081c97b139d6
主要有以下及部分内容:
  一.执行计划的 id
      select 查询的序列号，标识执行的顺序
       1.id 相同，执行顺序由上至下
       2.id 不同，如果是子查询，id 的序号会递增，id 值越大优先级越高，越先被执行
  二.执行计划的 select_type  
      查询的类型，主要是用于区分普通查询、联合查询、子查询等。
      1.SIMPLE：简单的 select 查询，查询中不包含子查询或者 union
      2.PRIMARY：查询中包含子部分，最外层查询则被标记为 primary
      3.SUBQUERY/MATERIALIZED：SUBQUERY 表示在 select 或 where 列表中包含了子查询，MATERIALIZED：表示 where 后面 in 条件的子查询
      4.UNION：表示 union 中的第二个或后面的 select 语句
      5.UNION RESULT：union 的结果
   三.执行计划的 type 
      访问类型，SQL 查询优化中一个很重要的指标，结果值从好到坏依次是：system > const > eq_ref > ref > range > index > ALL。
      1.system：系统表，少量数据，往往不需要进行磁盘IO
      2.const：常量连接
         (1)命中主键（primary key）或者唯一（unique）索引
         (2)被连接的部分是一个常量（const）值 
          举例:select * from user where id=1(id是主键)
      3.eq_ref：主键索引（primary key）或者非空唯一索引（unique not null）等值扫描
         (1)多表查询,命中主键或者唯一索引.等值连接.
            对于前表的每一行,后表只需要一行去扫描.
         举例:SELECT * FROM USER,user_ex WHERE user.id=user_ex.id;
      4.ref：非主键非唯一索引等值扫描
         针对索引值进行等值扫描(因为普通索引的值可能相同)
         举例:select * from user where id=1(id是普通索引)
      5.range：范围扫描
         举例: between，in，> 都是典型的范围（range）查询。
         注意必须针对索引来扫扫描,否则就是all.
      6.index：索引树扫描
         扫描全部的索引,仅比all快一点.
         举例:select id from user 
      7.ALL：全表扫描（full table scan)
         select  * from user.
    四.执行计划 possible_keys
        查询过程中有可能用到的索引。
    五.执行计划 key
        实际使用的索引，如果为 NULL ，则没有使用索引。
    六.执行计划 rows
        根据表统计信息或者索引选用情况，大致估算出找到所需的记录所需要读取的行数。



SQL的执行过程.
    1.客户端将sql语句发送到服务端.
    2.服务端首先进行权限校验,然后查询缓存,如果命中缓存,则直接返回,否则进行下一步.
    3.查询优化器根据sql语句和查询数据表生成对应的执行计划.
    4.mysql根据生成的执行计划,调用存储引擎的API,进行查询.
    5.将结果返回.
