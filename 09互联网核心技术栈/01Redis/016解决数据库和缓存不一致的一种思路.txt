 7
最经典的缓存+数据库读写的模式，cache aside pattern

1、Cache Aside Pattern

（1）读的时候，先读缓存，缓存没有的话，那么就读数据库，然后取出数据后放入缓存，同时返回响应

（2）更新的时候，先删除缓存，然后再更新数据库

2、为什么是删除缓存，而不是更新缓存呢？

原因很简单，很多时候，复杂点的缓存的场景，因为缓存有的时候，不简单是数据库中直接取出来的值


商品详情页的系统，修改库存，只是修改了某个表的某些字段，但是要真正把这个影响的最终的库存计算出来，可能还需要从其他表查询一些数据，然后进行一些复杂的运算，才能最终计算出

现在最新的库存是多少，然后才能将库存更新到缓存中去

比如可能更新了某个表的一个字段，然后其对应的缓存，是需要查询另外两个表的数据，并进行运算，才能计算出缓存最新的值的

更新缓存的代价是很高的

是不是说，每次修改数据库的时候，都一定要将其对应的缓存去跟新一份？也许有的场景是这样的，但是对于比较复杂的缓存数据计算的场景，就不是这样了

如果你频繁修改一个缓存涉及的多个表，那么这个缓存会被频繁的更新，频繁的更新缓存

但是问题在于，这个缓存到底会不会被频繁访问到？？？

举个例子，一个缓存涉及的表的字段，在1分钟内就修改了20次，或者是100次，那么缓存跟新20次，100次; 但是这个缓存在1分钟内就被读取了1次，有大量的冷数据

28法则，黄金法则，20%的数据，占用了80%的访问量

实际上，如果你只是删除缓存的话，那么1分钟内，这个缓存不过就重新计算一次而已，开销大幅度降低

每次数据过来，就只是删除缓存，然后修改数据库，如果这个缓存，在1分钟内只是被访问了1次，那么只有那1次，缓存是要被重新计算的，用缓存才去算缓存

其实删除缓存，而不是更新缓存，就是一个lazy计算的思想，不要每次都重新做复杂的计算，不管它会不会用到，而是让它到需要被使用的时候再重新计算


3.可能出现不一致的情况.
   比较复杂的数据不一致问题分析

   数据发生了变更，先删除了缓存，然后要去修改数据库，此时还没修改

   一个请求过来，去读缓存，发现缓存空了，去查询数据库，查到了修改前的旧数据，放到了缓存中

   数据变更的程序完成了数据库的修改

   完了，数据库和缓存中的数据不一样了。。。。

4.针对以上情况的处理.解决方案
   更新数据的时候，根据数据的唯一标识，将操作路由之后，发送到一个jvm内部的队列中

  读取数据的时候，如果发现数据不在缓存中，那么将重新读取数据+更新缓存的操作，根据唯一标识路由之后，也发送同一个jvm内部的队列中

   一个队列对应一个工作线程

  每个工作线程串行拿到对应的操作，然后一条一条的执行
 
   这样的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还没完成更新

   此时如果一个读请求过来，读到了空的缓存，那么可以先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成




加深理解:
    以上用法得好处是什么?
           1.能够确保数据一致.
           2.能够使缓存中存储得大多数都是热点数据,因为更新多,查询少得数据会被删除.
   缺点:
          1.热点数据,更新少得数据可能被删除,造成缓存击穿.
          解决方案: 
               缓存击穿采用concurrentHashMap对key进行加锁,可以使用tryCatch尝试获取锁,获取不到就等待100ms,直接再去查询缓存.
              上面其实不适用于一种场景,就是更新了一次,然后读了1000次.

