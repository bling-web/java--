 一.hdfs产生背景.
      随著数据量越来越大,现有的一台计算机渐渐满足不了大量数据的要求,就需要把数据分布到更多的操作系统的磁盘中,但是分配到很多的计算机中又不方便管理.
    所以就迫切需要一种系统来管理多个计算机中的文件,也就是分布式文件管理系统, 而hdfs就是其中一种分布式文件管理系统.
 
二.hdfs概述.
     是一个文件系统,用来存储文件,通过目录树来定位文件;其次,他是分布式的,有很多服务器联合起来实现其功能,集群中的服务器各有各的角色.
     hdfs适合一次写入,多次读出,但是不支持对文件的修改,只能追加.原因是要保持文件的一致性.

三.hdfs优缺点.
     优点:
         1.高容错性.
            一个文件最少会保持三个副本,即使其中一个因为一些原因损坏,还可以自动恢复.
         2.适合大数据处理.
           数据规模:处理数据规模达到TB,甚至PB级别.
           文件规模:能够处理百万以上的文件数量.
         3.流式数据访问.
            一次写入,多次读取,不能修改,只能追加.
            能保证数据的一致性.
         4.能够搭建在廉价的机器上,通过多副本机制,提高可靠性.
     缺点:
         1.不适合低延迟数据访问.
         2.不能高效的对大量小文件进行存储.
             在hdfs中,每存储一个文件,都要经过namenode,它会存储每一个文件的大小,名称,快照等等,并且每一个文件都会占一个block,也就是128M,所以不适合,太占内存.
             为什么是128M呢?
                 HDFS的数据是分块存储,块的大小可以通过参数dfs.blocksize配置.
                 对于硬盘上的数据传输,主要有两个时间,寻址时间和传输时间,一般业界认为寻址时间是10ms,且当寻址时间是传输时间的1%时,效率最高,所以传输时间也就是1s.而传输速度大概时100m/s.
                 所以也就是100m左右的数据块大小最好,所以时128m.
         3.不能并发写入,不能随机修改,
             一个文件同时只能有一个写,不能多个线程同时写.
            对文件操作只能追加,不能随机修改.
  

四.介绍.
    1. Client：就是客户端 
          1. 文件切分，文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行存储。
          2. 与NameNode交互，获取文件的位置信息。 
          3. 与DataNode交互，读取或写入数据。 
          4. Client提供一些命令来管理HDFS，比如启动或者关闭HDFS。
          5. Client可以通过一些命令来访问HDFS。 
    2. NameNode：就是Master，他是一个管理者。 
          1. 管理HDFS的名称空间/元数据。 
          2. 管理数据块映射信息。 
          3. 管理副本策略。
          4. 处理客户端请求 
   3. DataNode：就是Slave。实际执行者。 
          1. 存储实际的数据库块。 
          2. 执行数据库的读/写操作。 
   4. Secondary NameNode：并非NameNode的热备，当NameNode宕机时，它并不能马上接管NameNode并提 供服务。
         1. 辅助NameNode，分担其工作。
         2. 定期合并Fsimage和Edits，并推送给NameNode。
         3. 紧急情况下，可辅助恢复NameNode。 










 




