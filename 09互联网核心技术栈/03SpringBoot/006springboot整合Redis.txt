一.回顾redis.
    1.主从模式:
       一个masters有多个slave,一个slave只能有一个master,在数据同步的时候,master并不会阻塞,还可以处理client请求.
       也是一种读写分离的思想.master可读可写,slave只能写.
    2.哨兵模式: 
      主要利用Sentinel监控Master的状态,主要原理就是一直发送ping,如果指定时间内没有回复,然后有2/3以上slave都投票的话,就进行主从切换,选一个slave作为新的master.
      主要功能有两点:
         a.监控主节点和从节点是否工作正常.
         b.在主节点异常时进行主从切换.
    3.集群模式.
       最常见最广泛的模式,不存在单点的问题,数据可以横向进行分布,主要就是在配置文件中以集群模式启动节点,在集群中增加节点,分配槽.
       单个主从节点可以数据同步,并且自动切换.
    4.代理模式.
       如果大规模部署的话都是利用代理中间件实现大规模redis集群.
       比如：redis+Tweproxy+HAProxy


二.spring整合redis.
    1.引入依赖.
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-redis</artifactId>
            <version>1.4.3.RELEASE</version>
        </dependency>
      a.其实springboot整合需要框架直接在后面加上名称即可,比如spring-boot-starter-redis,然后就直接可以用,可以直接注入了.主要原因大概就是springboot框架已经包含了自动注入的功能,对于每一个引入的主要
        jar包(包含starter),都有一个factory的配置文件,里面配置了jar包的全路径,有了这个路径就可以将这些类处理然后注入到spring工厂中,我们就可以直接使用.
      b.其实这些spring-boot-starter-redis都有自己pom.xml,然后引入了相关的包.
    2.添加配置. 
       server.servlet.context-path=/redis
       server.port=8002

      #最大连接数量
      spring.redis.jedis.pool.max-active=50
      #最大等待数量
      spring.redis.jedis.pool.max-wait=5
      #最小的空闲数量
      spring.redis.jedis.pool.min-idle=5
     #最大空闲数量
      spring.redis.jedis.pool.max-idle=10
      #设置超时时间
     spring.redis.timeout=60000

     #以下是最关键的两个配置,
     #最大的切换连接节点的数目,当连接某一个节点不成功时,会去连接另一个节点
     spring.redis.cluster.max-redirects=1000
     spring.redis.cluster.nodes=192.168.5.111:6380,192.168.5.111:6381,192.168.5.111:6382,192.168.5.111:6383,192.168.5.111:6384,192.168.5.111:6385
  3.在使用的地方注入redisTemplate,然后new对应的ops对象即可(String对应value)
     例:
     -----service中-----
    @Service
    public class Redis_Service {
       @Resource
       RedisTemplate<String,String> template;                        //注入RedisTemplate<String,String>,
 
       ValueOperations<String, String> string = null;
      HashOperations<String, Object, Object> hash =null;
      ListOperations<String, String> list =null;
      SetOperations<String, String> set = null;
      ZSetOperations<String, String> zset = null;

      @PostConstruct                                                                 //这个注解用在方法上,标识该方法在对象依赖注入,初始化之后执行,本来想用非静态代码块执行,但是整个类都不能被注入,暂时不知道为什么
      public void init(){
          string = template.opsForValue();
          hash = template.opsForHash();
          list = template.opsForList();
          set = template.opsForSet();
          zset = template.opsForZSet();
      }

      //封装String类型方法
      public void set(String key,String value){
          string.set(key,value);
      }
      public String get(String key){
          return string.get(key);
      }
      //封装hash方法
      public void hset(String key,String itemKey,String itemValue){
          hash.put(key,itemKey,itemValue);
       }
       public String hget(String key,String itemKey){
           return (String)hash.get(key,itemKey);
       }
    }
    -----测试-----
    @org.junit.Test
    public void TestRedisService(){
        redis.set("name","wang");
        redis.hset("hset","韩信","刺客");
        System.out.println(redis.get("name"));
        System.out.println(redis.hget("hset","韩信"));
    }



     注意:
        1.所有新建的包都必须和application.properties同一级目录,或下一级目录.否则会扫描不到不能创建对象
        2.resource,autowired都不能允许注入到static属性上.
        3.好像service层是不允许代码块的.







