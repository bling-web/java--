
  就是使用idea操作hadoop.使用idea有什么优点呢?
     1.可以直接将宿主机上的文件和hdfs上的文件进行操作.
  

一.步骤.
    1.新建一个maven,quickstart.项目.
    2.引入依赖.
      <dependency>
         <groupId>org.apache.hadoop</groupId>
         <artifactId>hadoop-hdfs</artifactId>
         <version>2.7.7</version>
      </dependency>
      <dependency>
         <groupId>org.apache.hadoop</groupId>
         <artifactId>hadoop-common</artifactId>
         <version>2.7.7</version>
      </dependency>
    3.添加日志操作.
       就是将运行信息输出到日志.
       a.新建一个resource包,再在下面新建一个log4j.properties文件夹.
       b.添加以下信息.
          log4j.rootLogger=DEBUG, console,logfile                                                                //将日志输出到两个append中.
          log4j.appender.console=org.apache.log4j.ConsoleAppender                                  //第一个append
          log4j.appender.console.layout=org.apache.log4j.PatternLayout 
          log4j.appender.console.layout.ConversionPattern=%d %p [%c] - %m%n 
          log4j.appender.logfile=org.apache.log4j.FileAppender                                            //第二个append
          log4j.appender.logfile.File=target/hdfs.log 
          log4j.appender.logfile.layout=org.apache.log4j.PatternLayout   
          log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n
    4.操作.
         //1:获取文件系统.
        Configuration configuration = new Configuration();                                                                           //这个类会加载默认的配置,读取hdfs-site.xml
        
        FileSystem fs = FileSystem.get(new URI("hdfs://hadoop116:9000"),configuration,"root");                //URI指的是core-site.xml中的namenode的地址,所以才能操作hdfs.

        //操作系统
        //上传文件
        fs.copyFromLocalFile(new Path("F:/test.txt"),new Path("/"));


        //关闭资源
        fs.close();


如果想修改一些配置,不用默认的,或者在虚拟机上设置的,应该怎么办?比如想这一次只在两个节点上保存副本.
     两种方式:
          1.在resource包下新建文件hdfs-site.xml文件,把你想配置的属性配置到里面,它会自动读取.
             例:
                 <?xml version="1.0"?>
                 <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

                <configuration>
                  <property>
                     <name>dfs.replication</name>
                     <value>2</value>
                     <description>Default block replication.
                      The actual number of replications can be specified when the file is created.
                      The default is used if replication is not specified in create time.
                     </description>
                 </property>
               </configuration>
          2.直接在configuration对象中设置.(这种优先级最高)
             Configuration configuration = new Configuration();
             configuration.set("dfs.replication","2");

       优先级:代码>本地hdfs-site.xml>虚拟机hdfs-site.xml

二.具体操作.
    上传文件上面已经演示,这里不再演示.
     1.下载文件.
        @Test
       public void upload() throws Exception {
          //1.获取文件系统
          Configuration conf = new Configuration();
          FileSystem fs=FileSystem.get(new URI("hdfs://hadoop116:9000"),conf,"root"); 
        
          //2.下载文件
          fs.copyToLocalFile(false,new Path("/test.txt"),new Path("E:/"),true);     //最后这个true必须加上,用原始文件系统,不然可能没有权限啥的.
        
          //3.关闭资源
          fs.close();
      }
    2.获取文件库信息.
    @Test
    public void listfile() throws Exception{
        //1.获取文件系统
        Configuration conf = new Configuration();                                                           //这个类会加载默认的配置.读hdfs-site.xml文件.
        FileSystem fs=FileSystem.get(new URI("hdfs://hadoop116:9000"),conf,"root");
        //2.操作,递归的获取所有的文件
        RemoteIterator<LocatedFileStatus> listFiles = fs.listFiles(new Path("/"),true);      //这里为什么会返回一个迭代器,不返回list? 防止文件过多,一下子占用文件太多.
        while(listFiles.hasNext()){
            //获取文件的状态,通过这个状态对象来获取文件信息.
            LocatedFileStatus status = listFiles.next();
            System.out.println(status.getPath().getName());
            System.out.println(status.getBlockSize());
            System.out.println(status.getPermission());
            System.out.println(status.getLen());
            //获取block块的信息.
            BlockLocation[] locations = status.getBlockLocations();                                    //这里为什么返回一个数组? 因为一个文件可能同时占用几个block.
            
            for(BlockLocation location:locations){
                System.out.println(location.getLength());
                String[] hosts = location.getHosts();
                for (String host : hosts) {
                    System.out.println(host);
                }
            }
        }
        //3.关闭资源
        fs.close();
    }
    3.其实最开始和后面都一样,只是中间操作语句不一样.
       创建目录:
           fs.mkdir(new Path("/user/cc"));
       删除文件:
           fs.delete(new Path("/user/cc"));
       重命名文件:
           fs.rename(new Path(""),new Path(""));
  
       
  

