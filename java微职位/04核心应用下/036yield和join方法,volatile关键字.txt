1.yeild方法.
   线程的礼让,仅提醒当前线程可以将资源礼让给其他线程,优先执行其他线程.
   就是将该线程从运行状态转化为可运行状态(ready),虽然在java中统一成为runnable状态.
   我们知道当线程处于可运行(ready)时,是否运行要取决于cpu的调度.所以当你调用该方法,你不能决定它什么时候会再次真正运行,只是进行了一次状态的转换.

2.join方法.	
   线程的加入,比如在线程A中加入了线程B,那么就要求线程B先执行完毕,然后再继续执行线程A.
   举例:在main线程中加入了线程A.
              public static void main(String[] args) throws InterruptedException {
		Thread thread = new Thread(new Runnable() {
			public void run() {
				// TODO Auto-generated method stub
				System.out.println("线程A开始执行");
				try {
					Thread.currentThread().sleep(5000);
					System.out.println("线程A执行完毕");
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		},"线程A");
		thread.start();
		thread.join();                                                                                    //加入了A线程.	
		
		for(int i=0;i<10;i++) {
			Thread.sleep(1000);
			System.out.println("当前执行:"+i);
		}
	}
     执行结果如下: 可以看到严格在线程A执行完毕后,才继续执行main线程.
         线程A开始执行
         线程A执行完毕
         当前执行:0
         当前执行:1
         当前执行:2
         当前执行:3
         当前执行:4
         当前执行:5
         当前执行:6
         当前执行:7
         当前执行:8
         当前执行:9
     而如果不join线程A,执行结果如下:    线程A和main线程并发执行.
          线程A开始执行
          当前执行:0
          当前执行:1
          当前执行:2
          当前执行:3
          线程A执行完毕
          当前执行:4
          当前执行:5
          当前执行:6
          当前执行:7
          当前执行:8
          当前执行:9
       
      



3.volatile关键字.
    所有线程的共享变量都存储在主内存(自己认为是在方法区)中，每一个线程都有一个独有的工作内存，每个线程不直接操作在主内存中的变量，而是将主内存上变量的副本放进自己的工作内存中，只操作工作内存中的数据。当修改完毕后，再把修改后的结果放回到主内存中。每个线程都只操作自己工作内存中的变量，无法直接访问对方工作内存中的变量，线程间变量值的传递需要通过主内存来完成。
    1.保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。（实现可见性）
    2 禁止进行指令重排序。（实现有序性）
    3.volatile 只能保证对单次读/写的原子性。i++ 这种操作不能保证原子性。


   



  
