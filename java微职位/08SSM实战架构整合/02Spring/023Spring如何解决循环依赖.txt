一.知识总结,
    先说一下结论,spring可以解决setter引起的循环依赖问题,通过获取早期引用的一种方式,不能解决构造器中传入属性的循环依赖,因为此时早期引用还没有创建.
 

二.什么是循环依赖?
     比如A里面需要B对象,B对象里需要A对象,首先我们去创建A对象,然后发现需要对象B,接着去创建B对象,但是又发现需要对象A,然后又去创建A对象,这样就陷入了一个循环当中,

三.怎么解决?
    1.首先引入三个缓存.(都是map结构)
       (1) SingletonObject:用于存放已经完全初始化好的对象.可以直接拿出来用.                        结构:bean name-->bean instance
       (2).earlySingletonObject:用于存放对象的早期引用(还没有注入属性),用于解决循环依赖.            bean name-->bean instance
       (3).SingletonFactory:用于存放bean工厂对象,解决循环依赖(ObjectFactory就是从这里获取的)  bean name-->ObjectFactory.
   2.解决循环依赖的具体过程.(以上面A.B对象为例).
      (1).首先创建对象A,当早期对象创建好后,就把指向原始对象的引用通过ObjectFactory暴露出去(存到这里面,).
      (2).然后发现依赖B,去创建B对象,也会解析自己的依赖,当它检测到对象A这个依赖时,会通过getBean从容器中获取对象A.
      (3).然后会去SingletonObject中获取,返回null.
           去earlySingletonObject中获取,也返回null,因为此时早期引用还没有存放到这里.
           接着去SingletonFactory中获取,获取到ObjectFactory,然后通过getObject方法可以获取到早期引用,然后放到earlySingletonObject缓存中.
      (4).现在对象B拿到了对象A的引用,就可以创建成功,从而对象A也可以创建成功.
 