一.logback介绍.
    logback是java的日志开源组件,是log4j创始人写的,性能要优于log4j,目前主要分为3个模块.
    1.logback-core:核心代码模块.
    2.logback-classic:log4j的一个改良版本,同时实现了slf4j的接口,这样想要切换其他的日志组件也是一件很容易的事.
       slf4j是什么? 是一套标准,定义了一系列的接口,不提供任何的具体实现,所以我们利用这套接口进行开发,可以任意切换底层实现框架.
    3.logback-access:访问模块与Servlet容器集成来提供http来访问日志的功能.

二.日志级别的补充.
    1.ALL 最低等级的，用于打开所有日志记录。

    2.TRACE designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。

    3.DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。

    4.INFO 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。

    5.WARN 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。

    6.ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。

    7.FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。

    8.OFF 最高等级的，用于关闭所有日志记录。

   如果将log level设置在某一个级别上，那么比此级别优先级高的log都能打印出来。例如，如果设置优先级为WARN，那么OFF、FATAL、ERROR、WARN 4个级别的log能正常输出，
    而INFO、DEBUG、TRACE、 ALL级别的log则会被忽略。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。

   说明:也就是最低等级会输出所有的日志消息,越高输出日志越少.

三.使用日志.
    1.直接将日志文件放到application.properties同级目录下,重启即可以使用,然后去对应路径下看是否有日志文件.
    2.使用日志输出,在实际生产中,我们很多时候都会使用日志输出.
      举例:
      @Configuration
      @ComponentScan
      @PropertySource("classpath:myApplication.properties")
      public class AppConfig {
          private static final Logger log= LoggerFactory.getLogger(AppConfig.class);      //这里的logger是slf4j中的接口.
         @Value("${custom_id}")  
         private String id;
        @Value("${name}")
         private String name;
         public void output(){
            log.info("用日志输出信息:{},{}",id,name);                                                             //这样即可输出,很简单,{}是一个占位符,这句话和System.out.print("用日志输出信息"+id+","+name);效果一样.
            System.out.println(name);
        }
     }
     