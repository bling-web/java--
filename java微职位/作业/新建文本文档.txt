一.简述redis的数据类型.
    1.字符串.
        redis的最基础类型.String是二进制的,可以存储序列化对象,图片,字符串,数值等
      内部编码:
        a.raw:长的字符串(字符串长度大于44个字节).
        b.int:数值,这里的int是8个字节.
        c.emstr:短字符串
    2.hash
       hash类型是String类型的field和value的映射表,一个field和一个value可以看做一个entry,一个key可以对应很多个entry,可以代表一个哈希表.
      内部编码:
        a.hashtable
           当不满足ziplist的编码条件时,使用hashtable编码.
        b.ziplist
           当哈希字段field个数小于配置文件中的hash-max-ziplist-entries个数,默认是512个,并且单个entry的value都小于hash-max-ziplist-value(默认64字节) 时,选用ziplist内部编码.
     3.list.
        list类型是链表结构的集合,有push和pop操作,更为准确的说,list是一个双向链表,它即可以作为栈来使用,又可以作为队列来使用.设计非常精妙.
        内部编码:
         quicklist:在新版本中已经替换成quicklist.
     4.set.
        set是String的无序集合,对集合我们可以取并集,交集,差集,随机数等.不允许重复元素,有重复元素自动忽略.
        内部编码:
        a. hashtable
            当不满足inset的使用条件时,使用hashtable内部编码.
        b.inset
            当数据元素均为int类型,且元素个数小于512时,使用inset内部编码.
     5.zset
        zset是String的有序集合,它也不允许有重复的元素,比较特别的是对于每一个元素,它都会关联一个double类型的分数,用来排序.
        虽然元素不可以重复,但是分数可以重复.
        内部编码:
        a.skiplist
           不满足ziplist的使用条件时,使用skiplist编码方式,此时读写效率会下降.
        b.ziplist
           当集合元素个数小于128(默认配合),并且每个元素的大小均小于64字节时,使用ziplist.


二.简述redis持久化的两种方式.
    1.RDB
       RDB是redis的默认的持久化方式,在固定时间内将内存中的数据集快照写入到磁盘dump.rdb文件中.
       优点:
            a.整个redis只有一个dump.rdb文件,文件备份,恢复方便.
            b.保证性能最大化.在执行持久化操作时,会fonk一个子进程,避免服务进程进行大量的IO操作.
       缺点:
            a.可能会丢失数据.如果在写入磁盘的时间间隔发生故障,那这个时间段内的数据就会丢失.
    2.AOF
       记录数据写操作的持久化方案,会忠实的记录每一条写操作,并持久化到本地磁盘的.aof文件,在重启redis的时候,可以该文件,重新执行命令来恢复数据.
       优点:
            a.更高的数据安全性,一秒钟就写入一次.
            b.AOF包含格式清晰,易于理解的日志文件,可以根据这个文件来完成数据的重建工作. 
       缺点:
            a.效率没有RDB高.
        

三.redis有哪些架构模式,说一说各自的特点.
    1.主从模式.
       特点:
           a.一个master有多个slave.一个slave只能有一个master.主从之间可以进行数据同步.
           b.master可以进行读写操作,slave只能进行写操作.
       怎么进行数据同步:
            全量同步:在刚连接成功的时候,主节点进行bgsave,之后把快照文件发送给从节点,从节点接收后.丢弃旧数据,载入快照.
            增量同步:主节点每执行一个写命令就会向服务器发送相同的命令,然后从节点接收并执行.
    2.哨兵模式
       主要利用Sentinel监视master的状态,主要原理就是一直发送ping,如果指定时间内没有回复的话,并且2/3从节点都投票的话,就进行主从切换.
       主要功能:
            a.监控主节点和从节点的状态.
            b.在主节点出现问题时自动进行主从切换.
    3.集群模式.
       最常见最广泛的模式.不存在单点的问题,数据可以横向均匀分布,主要就是在配置文件中以集群方式启动节点,在集群中增加节点,分配槽.
       单个主从节点可以进行数据同步,自动切换.
    4.代理模式.
       通常会使用代理中间件进行大规模集群分布.