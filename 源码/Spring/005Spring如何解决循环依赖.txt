一.知识总结,
    创建对象有两个步骤,实例化和初始化.
    初始化通常有两步,set方法和构造方法
    先说一下结论,spring可以解决set方法引起的循环依赖问题,通过获取早期引用的一种方式,不能解决构造器中传入属性的循环依赖,因为此时早期引用还没有创建.在你创建对象的时候必须传入对象

    spring中的三级缓存放在DefaultSingletonBeanRegistry
 

二.什么是循环依赖?
     比如A里面需要B对象,B对象里需要A对象,首先我们去创建A对象,然后发现需要对象B,接着去创建B对象,但是又发现需要对象A,然后又去创建A对象,这样就陷入了一个循环当中,

三.怎么解决?
    1.首先引入三个缓存.(都是map结构)
       (1) SingletonObject:用于存放已经完全初始化好的对象.可以直接拿出来用.                        结构:bean name-->bean instance
       (2).earlySingletonObject:用于存放对象的半成品(还没有完成初始化),用于解决循环依赖.                bean name-->bean instance
       (3).SingletonFactory:用于存放lambda表达式,解决循环依赖                                           bean name-->ObjectFactory.
             ObjectFactory是什么?是一个函数式接口,只有一个方法getObject(),可以传入lambda表达式或者匿名内部类.在spring中传入的三级缓存中的lambda表达式是这样的
			 addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));
			 此时注意lambda表达式是不会执行的,因为其实只是传一个对象地址过去(想一想匿名内部类,子类实现),只有在传过去的引用调用getObject()方法时候才会执行.
			 并且在调用getObject方法的时候其实就调用的是getEarlyBeanReference方法.
			
 					
   2.解决循环依赖的具体过程.(以上面A.B对象为例).
      (1)首先创建对象A,会先去容器中查找,此时肯定找不到,然后进行创建,当对象完成实例化后,会把当前beanName和一个lambda表达式放进去.也就是这个代码.
	     addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));
      (2)然后在初始化的时候发现依赖B,去创建B对象,B也会解析自己的依赖,当它检测到对象A这个依赖时,会通过getBean从容器中获取对象A.
      (3).然后会去SingletonObject中获取,返回null.
           去earlySingletonObject中获取,也返回null,因为此时实例化对象还没有存放到这里.
           接着去SingletonFactory中获取,获取到ObjectFactory,然后通过getObject方法,也就是执行getEarlyBeanReference方法获取到对象A的半成品,然后放到earlySingletonObject二级缓存中.
      (4)现在对象B拿到了对象A的引用,就可以创建成功,从而对象A也可以创建成功. 




函数式接口:
   限定只有一个方法,这样就可以使用lambda表达式进行传递.不用写方法名称
   
   
四.总结.
   spring默认支持单例得循环依赖
   1.解决循环依赖的本质是什么? 
     实例化和初始化分开,能够拿到半成品对象.
	 
   2.如果使用一级缓存能不能解决循环依赖?
     不能,因为我们的成品对象和半成品对象都需要空间去存储,所以一级缓存不行,但是有人说,将成品和半成品对象都放到一个缓存中加一个标识,但是这样的化很多地方都需要改,变得更加的麻烦,还不如用空间
	 换时间.
	 
   3.那二级缓存能不能解决循环依赖?
     如果单就循环依赖这个问题的话是能够解决的.但是在spring中还有一个很重要的部分,就是代理,如果我这两个循环依赖的对象都是代理呢?使用三级缓存的本质在于处理aop.
	 
   4.为什么使用三级缓存能够解决aop循环依赖问题?
      说法1:
	    我们知道bean的生命周期主要有以下几步:
		    new
			填充属性(依赖注入)
			执行init方法
			代理aop
			放到singletonObjects
        如果是正常执行这几个步骤的话,那我们通过依赖注入的方式得到就是原有对象,但是通过实际测试得知,我们得到的是代理对象,那么就一定需要将代理aop提前.
		如果用最简单的方式,我们在填充属性的时候判断是否需要注入代理对象,是的话直接注入即可,但是,这样扩展性很差,后面再需要扩展的话是不是又要加if,所以在spring源码中直接放入了一个工厂,他是一个接口.这样久极大的增加了扩展性和实用性. 
		
		那是不是就值需要两级缓存?一个存完整的对象,一个存工厂?
		  这样就无法存放半成品对象,如果有多个对象需要依赖该对象每次就都得生产一次对象,这是非常不合理得.spring工厂中得对象默认都是单例得,这也是为什么当工厂创建一次对象会从容器中删除.
		
    说法2:(感觉有点不对)	  
	 我们知道创建代理必然需要创建原始对象,也就是在整个创建过程中,会包含一个原始对象,一个代理对象,在spring设计中,会以beanName作为key获取存储对应的对象,那一个beanName能对应两个对象吗?
	 不能,既然不能的话,就需要保证在使用的时候加一层判断,判断是否需要进行代理的处理.
	 那我怎么知道你什么时候使用呢?
      因为不知道什么时候回调,所以通过存储lambda表达式的方式,在使用的时候直接对普通对象进行覆盖,从而保证全局唯一.
   
   
问题:
   依赖注入是不是就相当于set方法注入,填充属性
     是的,如果是依赖注入就相当于set方法注入.
   如果是静态属性直接赋值的循环依赖呢?
      这个是没有关系的,因为不涉及到从spring工厂中获取对象,只是执行init方法进行赋值.
   如果是非静态属性直接赋值的循环依赖呢?
      这个本身就是有问题的,不涉及到spring,因为非静态变量是属于对象的,每new一个对象就会初始化变量,从而造成无限循环,报StackOverFlowException.
	为什么不支持多例.
	  因为spring在构造对象得时候会判断是单例还是多例,单例得话才会去缓存中取,原型得话每次就直接创建,所以就不能解决.
 